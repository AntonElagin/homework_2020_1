
QUnit.module('Тестируем функцию anagram', () => {
  QUnit.test('Функция работает правильно', (assert) => {
    const input = [
      'кот', 'пила', 'барокко',
      'стоп', 'ток', 'кошка',
      'липа', 'коробка', 'пост',
    ];

    const output = [
      ['барокко', 'коробка'],
      ['кот', 'ток'],
      ['липа', 'пила'],
      ['пост', 'стоп'],
    ];

    assert.deepEqual(anagram(input), output);
  });
  QUnit.test('Функция должна выдавать логичные ответы на нестандартные входные данные', (assert) => {
    assert.deepEqual(anagram([]), []);
    assert.deepEqual(anagram({ cat: 'dog', dog: 'cat' }), []);
  });
  QUnit.test('Функция обрабатывет только массив с элементами строками, а элементы других типов игнорирует ', (assert) => {
    const input = [
      'кот', 'пила', 'барокко',
      'стоп', 'ток', 'кошка',
      'липа', 'коробка', 'пост',
      1, true,
    ];

    const output = [
      ['барокко', 'коробка'],
      ['кот', 'ток'],
      ['липа', 'пила'],
      ['пост', 'стоп'],
    ];

    assert.deepEqual(anagram(input), output);
  });
  QUnit.test('Функция возвращает группы анаграмм размером от 2-х слов', (assert) => {
    const input = [
      'кот', 'cлон', 'барокко',
      'стоп', 'ток', 'кошка',
      'липа', 'коробка', 'постъ',
    ];

    const output = [
      ['барокко', 'коробка'],
      ['кот', 'ток'],
    ];

    assert.deepEqual(anagram(input), output);
  });
});
